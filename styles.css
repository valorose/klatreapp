"use client"

import React, { useEffect, useState } from 'react'
import L from 'leaflet'
import 'leaflet/dist/leaflet.css'

// Ensure Leaflet icons are properly loaded
import icon from 'leaflet/dist/images/marker-icon.png'
import iconShadow from 'leaflet/dist/images/marker-shadow.png'

let DefaultIcon = L.icon({
  iconUrl: icon.src,
  shadowUrl: iconShadow.src,
  iconSize: [25, 41],
  iconAnchor: [12, 41],
})

L.Marker.prototype.options.icon = DefaultIcon

interface Crag {
  name: string
  latitude: number
  longitude: number
}

interface Weather {
  condition: string
  temperature: number
  windSpeed: number
  humidity: number
}

export default function BergenCragMap() {
  const [map, setMap] = useState<L.Map | null>(null)
  const [selectedCrag, setSelectedCrag] = useState<Crag | null>(null)
  const [weather, setWeather] = useState<Weather | null>(null)

  useEffect(() => {
    // Initialize map
    const mapInstance = L.map('map').setView([60.3913, 5.3221], 10)

    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
      attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
    }).addTo(mapInstance)

    setMap(mapInstance)

    // Load crag data
    fetch('crags.json')
      .then(response => response.json())
      .then((crags: Crag[]) => {
        crags.forEach(crag => {
          const marker = L.marker([crag.latitude, crag.longitude]).addTo(mapInstance)
          marker.on('click', () => {
            setSelectedCrag(crag)
            getWeather(crag.latitude, crag.longitude, crag.name)
          })
        })
      })
      .catch(error => console.error('Error loading crags.json:', error))

    return () => {
      mapInstance.remove()
    }
  }, [])

  const getWeather = async (lat: number, lon: number, cragName: string) => {
    const apiUrl = `https://api.met.no/weatherapi/locationforecast/2.0/compact?lat=${lat}&lon=${lon}`
    try {
      const response = await fetch(apiUrl, {
        headers: {
          "User-Agent": "BergenClimbingApp/1.0 (your_email@example.com)"
        }
      })
      if (!response.ok) {
        throw new Error('Network response was not ok')
      }
      const data = await response.json()
      const timeseries = data.properties.timeseries
      if (timeseries && timeseries.length > 0) {
        const details = timeseries[0].data.instant.details
        const nextHourData = timeseries[0].data.next_1_hours
        const symbolCode = nextHourData?.summary?.symbol_code || "cloudy"

        let weatherCondition = "☁️ Cloudy"
        switch (symbolCode) {
          case "clearsky": weatherCondition = "☀️ Sunny"; break
          case "partlycloudy": weatherCondition = "🌤️ Partly Cloudy"; break
          case "lightrain":
          case "rain": weatherCondition = "☔ Rainy"; break
          case "heavyrain": weatherCondition = "🌧️ Heavy Rain"; break
          case "fog": weatherCondition = "🌫️ Foggy"; break
          case "snow": weatherCondition = "❄️ Snow"; break
        }

        setWeather({
          condition: weatherCondition,
          temperature: details.air_temperature,
          windSpeed: details.wind_speed,
          humidity: details.relative_humidity
        })
      }
    } catch (error) {
      console.error('Error fetching weather data:', error)
      setWeather(null)
    }
  }

  return (
    <div className="flex h-screen">
      <div id="sidebar" className="w-1/4 p-4 bg-white shadow-lg overflow-y-auto">
        <h1 className="text-2xl font-bold text-center text-blue-600 mb-4">Bergen Crag Map</h1>
        {selectedCrag && (
          <div id="crag-details" className="mt-4">
            <h2 className="text-xl font-semibold mb-2">{selectedCrag.name}</h2>
            {weather ? (
              <div className="weather-card mt-4 p-4 bg-gray-100 rounded-lg">
                <h3 className="font-semibold mb-2">Current Weather</h3>
                <p>{weather.condition}</p>
                <p>🌡️ Temperature: {weather.temperature}°C</p>
                <p>💨 Wind Speed: {weather.windSpeed} m/s</p>
                <p>💧 Humidity: {weather.humidity}%</p>
              </div>
            ) : (
              <p>Loading weather data...</p>
            )}
          </div>
        )}
      </div>
      <div id="map" className="w-3/4"></div>
    </div>
  )
}
